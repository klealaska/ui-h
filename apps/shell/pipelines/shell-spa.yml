trigger: none

#######################################################
# Setting up reusable variables for the pipeline      #
#              CHANGE ALL VARS HERE                   #
#######################################################
variables:
  - template: './variables/common.yml'

#######################################################
#                 DONT CHANGE BELOW                   #
#######################################################

# Declaration of an Agent pool. The Linux-VMSS-agent-pool will be used if the pipeline is to run in a container
pool: linux-vmss-agent-pool

# Declartion of the container for the pipeline to run in
resources:
  repositories:
    - repository: templates
      type: git
      name: User Interface Center of Excellence/templates
      ref: refs/heads/master
  containers:
    - container: cicd_devtools
      image: axglbhubacr.azurecr.io/cicd-devtools:latest
      endpoint: DefaultDockerRegistry
      options: '--user root'
    - container: cypress-base
      image: demozombiedice.azurecr.io/cypress/base:16
      endpoint: DemoZombieDice
  pipelines:
    - pipeline: ui-coe-ci-tagged
      source: ui-coe-ci-tagged
      project: 'User Interface Center of Excellence'
      trigger:
        branches:
          - master
        tags:
          - shell-spa

stages:
  # All Deploy steps. Each Environment is called, similarly, with required parameters passed to the templates.

  - template: '../../../tools/pipelines/templates/deploy-shell-spa.yml'
    parameters:
      stages:
        - stage:
          environment: dv
          varPath: shell/pipelines/variables
          gate: dv-shell
          serviceConnection: $(nonProdServiceConnection)
          dependsOn: ''
          stageCondition: "and(succeeded(), and(ne(variables['Build.SourceBranch'], 'refs/heads/master'), eq(variables['Build.Reason'], 'Manual')))"
          applicationName: $(applicationName)
          region1: $(region1)
          region2: $(region2)
          appPath: $(appPath)
          appTag: $(appTag)
          featureFlagPath: $(featureFlagPath)
          featureFlagFileName: $(featureFlagFileName)

        - stage:
          environment: ci
          varPath: shell/pipelines/variables
          gate: ci-shell
          serviceConnection: $(nonProdServiceConnection)
          dependsOn: ''
          stageCondition: "eq(variables['Build.SourceBranch'], 'refs/heads/master')"
          applicationName: $(applicationName)
          region1: $(region1)
          region2: $(region2)
          appPath: $(appPath)
          appTag: $(appTag)
          featureFlagPath: $(featureFlagPath)
          featureFlagFileName: $(featureFlagFileName)

        - stage:
          environment: qa
          varPath: shell/pipelines/variables
          gate: qa-shell
          serviceConnection: $(nonProdServiceConnection)
          dependsOn: 'e2e'
          stageCondition: "and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))"
          applicationName: $(applicationName)
          region1: $(region1)
          region2: $(region2)
          appPath: $(appPath)
          appTag: $(appTag)
          featureFlagPath: $(featureFlagPath)
          featureFlagFileName: $(featureFlagFileName)

        - stage:
          environment: st
          varPath: shell/pipelines/variables
          gate: st-shell
          serviceConnection: $(prodServiceConnection)
          dependsOn: 'qa'
          stageCondition: "and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))"
          applicationName: $(applicationName)
          region1: $(region1)
          region2: $(region2)
          appPath: $(appPath)
          appTag: $(appTag)
          featureFlagPath: $(featureFlagPath)
          featureFlagFileName: $(featureFlagFileName)

        - stage:
          environment: pr
          varPath: shell/pipelines/variables
          gate: pr-shell
          serviceConnection: $(prodServiceConnection)
          dependsOn: 'st'
          stageCondition: "and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))"
          applicationName: $(applicationName)
          region1: $(region1)
          region2: $(region2)
          appPath: $(appPath)
          appTag: $(appTag)
          featureFlagPath: $(featureFlagPath)
          featureFlagFileName: $(featureFlagFileName)

  - template: monorepo/e2e.yml@templates
    parameters:
      dependsOn: 'ci'
      e2eName: $(e2eName)
      isMfe: false

  - template: '../../../tools/pipelines/templates/fortify-scan.yml'
    parameters:
      appTag: $(appTag)
      dependsOn: 'qa'
      applicationRoot: '/apps/$(appPath)/src'
      fortifyApplicationName: 'User Interface Center of Excellence'
      microserviceName: 'ui-coe'

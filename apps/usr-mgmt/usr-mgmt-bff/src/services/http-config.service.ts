/**
 * @file This file was generated by ax-app generator.
 * @copyright AvidXchange Inc.
 */
import { Inject, Injectable } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import { httpConfig } from '../app/models/http-config.model';
import { MOCK_ENV } from '../app/shared';
import { UserLifecycleOperationsDTO } from '../app/models';

/**
 * HttpConfigService
 * @description A service that will contain httpConfig objects
 * that hold the remote and local URL's to the appropriate resource
 * the `path` property contains the remote URL
 * the `localPath` property contains the relative path, extending the provided 'MOCK_FILE_PATH',
 * to the local mock json file.
 * 'MOCK_ENV' needs to be provided representing a boolean that indicates if the app is run in mock or not
 */
@Injectable()
export class HttpConfigService {
  constructor(@Inject(MOCK_ENV) private mockEnv: boolean, private configService: ConfigService) {}

  /**
   * TODO: A new platform is being developed that will orchestrate auth and user access endpoints
   *       once that is in place we will need to update our baseUrl's and any paths that extend from them
   */
  // the baseUrl ends in `avidauth` and the defined routes in their swagger start with `avidauth`
  // so the doubling up of `avidauth` is intentional
  // the routes will look like this: 'https://api-dv01.devavidxcloud.com/SecPlat/SecAvid/avidauth/avidauth/...'
  private readonly baseUrl = `${this.configService.get('AVID_AUTH_BASE_URL')}/avidauth`;
  private readonly userAccountsBaseUrl = `${this.baseUrl}/user-accounts`;

  private getPath(config: httpConfig): string {
    /**
     * TODO: while the new orchestration platform is being developed, we will only be serving mock data
     *       therefore we will only return the local path for now.
     *       this will need to be reverted once that platform is accessible
     */
    // return config[this.mockEnv ? 'localPath' : 'path'];
    return config.localPath;
  }

  //! update the local paths and file names to remove account references and sync with new terminology
  // User Accounts endpoints
  public createUser(): string {
    const config: httpConfig = {
      path: `${this.userAccountsBaseUrl}`,
      localPath: '/create-user.json',
    };

    return this.getPath(config);
  }

  public getUserById(id: string): string {
    const config: httpConfig = {
      path: `${this.userAccountsBaseUrl}/${id}`,
      localPath: '/get-user-by-id.json',
    };

    return this.getPath(config);
  }

  public updateUserById(id: string): string {
    const config: httpConfig = {
      path: `${this.userAccountsBaseUrl}/${id}`,
      localPath: '/update-user-by-id.json',
    };

    return this.getPath(config);
  }

  public getUsers(): string {
    //TODO: update path to real endpoint when its ready
    const config: httpConfig = {
      path: '',
      localPath: '/get-users-list.json',
    };

    return this.getPath(config);
  }

  public updateUserLifecycleById(userId: string, body: UserLifecycleOperationsDTO): string {
    const suffix =
      body.name === 'Activate'
        ? 'activate'
        : body.name === 'Deactivate'
        ? 'deactivate'
        : 'expire-password';

    const config: httpConfig = {
      path: '/IAM/users/{user_id}/lifecycle_operations', // TODO: path TBD. update when available
      localPath: `/update-user-lifecycle-${suffix}.json`,
    };

    return this.getPath(config);
  }

  public inviteUserById(userId: string): string {
    const config: httpConfig = {
      path: `/IAM/users//${userId}/invitations`, // TODO: use updated base url
      localPath: '/invite-user-by-id.json',
    };

    return this.getPath(config);
  }
}

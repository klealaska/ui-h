/**
 * @file This file was generated by ax-service generator.
 * @copyright AvidXchange Inc.
 */

import { ConfigService } from '@ui-coe/shared/util/services';
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';


<% if(swaggerUrl) {%>
  // SWAGGER: <%= swaggerUrl %>
<%}%>

@Injectable({
  providedIn: 'root',
})
export class <%= name.className %>Service {
  constructor(private http: HttpClient, private configService: ConfigService) {}

  // TODO: Ensure `any` types are replaced with strongly typed params & response interfaces
  get<%= name.classNamePlural %>(): Observable<any> {
    const endpoint: string = this.configService.get('<%= configKey.name %>') + '/<%= name.namePlural %>';

    return this.http.get<any>(endpoint);
  }

  // TODO: Ensure `any` types are replaced with strongly typed params & response interfaces
  get<%= name.className %>(<%= name.propertyName %>Params: any): Observable<any> {
    const endpoint: string = this.configService.get('<%= configKey.name %>') + '/<%= name.namePlural %>/' + <%= name.propertyName %>Params.id;

    return this.http.get<any>(endpoint);
  }

  // TODO: Ensure `any` types are replaced with strongly typed params & response interfaces
  create<%= name.className %>(body: any): Observable<any> {
    const endpoint: string =
      this.configService.get('<%= configKey.name %>') + '/<%= name.namePlural %>';

    return this.http.post<any>(endpoint, body);
  }

  // TODO: Ensure `any` types are replaced with strongly typed params & response interfaces
  update<%= name.className %>(
    <%= name.propertyName %>Params: any,
    body: any
  ): Observable<any> {
    const endpoint: string =
      this.configService.get('<%= configKey.name %>') + '/<%= name.namePlural %>/' + <%= name.propertyName %>Params.id;

    return this.http.put<any>(endpoint, body);
  }

  // TODO: Ensure `any` types are replaced with strongly typed params & response interfaces
  delete<%= name.className %>(<%= name.propertyName %>Params: any): Observable<Record<string, never>> {
    const endpoint: string = this.configService.get('<%= configKey.name %>') + '/<%= name.namePlural %>/' + <%= name.propertyName %>Params.id;

    return this.http.delete<Record<string, never>>(endpoint);
  }
}

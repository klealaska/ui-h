/**
 * @file This file was generated by ax-service generator.
 * @copyright AvidXchange Inc.
 */

import { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';
import { TestBed } from '@angular/core/testing';
import { ConfigService } from '@ui-coe/shared/util/services';
import { <%= name.className %>Service } from './<%= name.name %>.service';

describe('<%= name.className %>Service', () => {
  let service: <%= name.className %>Service;
  let httpMock: HttpTestingController;
  const mockId = 'some_id';
  const mockConfigService: Partial<ConfigService> = {
    get: jest.fn(() => 'url'),
  };
  const mockGetResponse: any = {
    items_requested: 10,
    items_returned: 3,
    items_total: 3,
    offset: 0,
    items: [
      {
        id: mockId,
      },
    ],
  };
    const mockGetDetailParams: any = {
    id: mockId,
  };
  const mockCreateBody: any = {
    id: mockId,
  };
  const mockCreateResponse: any = {
    id: mockId,
  };
  const mockUpdateBody: any = {
    id: mockId,
  };
  const mockUpdateParams: any = {
    id: mockId,
  };
  const mockDeleteParams: any = {
    id: mockId,
  };

  beforeEach(() => {
    TestBed.configureTestingModule({
      imports: [HttpClientTestingModule],
      providers: [<%= name.className %>Service, { provide: ConfigService, useValue: mockConfigService }],
    });

    service = TestBed.inject(<%= name.className %>Service);
    httpMock = TestBed.inject(HttpTestingController);
  });

  afterEach(() => {
    httpMock.verify();
  });

  it('should be created', () => {
    expect(service).toBeTruthy();
  });

  describe('get<%= name.classNamePlural %>', () => {
    it('should return the <%= name.name %> items', done => {
      service.get<%= name.classNamePlural %>().subscribe((response: any) => {
        expect(response).toEqual(mockGetResponse);
        done();
      });

      const request = httpMock.expectOne('url/<%= name.namePlural %>');
      expect(request.request.method).toBe('GET');
      request.flush(mockGetResponse);
    });
  });

  describe('get<%= name.className %>', () => {
    it('should return a <%= name.name %> item', () => {
      service.get<%= name.className %>(mockGetDetailParams).subscribe((response: any) => {
        expect(response).toEqual(mockGetResponse.items[0]);
      });
      const request = httpMock.expectOne(`url/<%= name.namePlural %>/${mockId}`);
      expect(request.request.method).toBe('GET');
      request.flush(mockGetResponse.items[0]);
    });
  });

  describe('create<%= name.className %>', () => {
    it('should create a <%= name.name %> item', () => {
      service.create<%= name.className %>(mockCreateBody).subscribe((response: any) => {
        expect(response).toEqual(mockCreateResponse);
      });
      const request = httpMock.expectOne('url/<%= name.namePlural %>');
      expect(request.request.method).toBe('POST');
      request.flush(mockCreateResponse);
    });
  });

  describe('update<%= name.className %>', () => {
    it('should update a <%= name.name %> item', () => {
      service.update<%= name.className %>(mockUpdateParams, mockUpdateBody).subscribe((response: {}) => {
        expect(response).toEqual({});
      });
      const request = httpMock.expectOne(`url/<%= name.namePlural %>/${mockId}`);
      expect(request.request.method).toBe('PUT');
      request.flush({});
    });
  });

  describe('delete<%= name.className %>', () => {
    it('should delete a <%= name.name %> item', () => {
      service.delete<%= name.className %>(mockDeleteParams).subscribe((response: {}) => {
        expect(response).toEqual({});
      });
      const request = httpMock.expectOne('url/<%= name.namePlural %>/some_id');
      expect(request.request.method).toBe('DELETE');
      request.flush({});
    });
  });
});

parameters:
  stages: {}

stages:
  - ${{ each stage in parameters.stages }}:
      - stage: ${{ stage.environment }}
        displayName: 'Deploy ${{ stage.environment }}'
        condition: ${{ stage.stageCondition }}
        dependsOn: ${{ stage.dependsOn }}
        jobs:
          - deployment: Deploy${{ stage.environment }}
            displayName: 'Deploy ${{ stage.environment }}'
            environment: ${{ stage.gate }}
            container: cicd_devtools
            strategy:
              runOnce:
                deploy:
                  steps:
                    - checkout: self
                    - download: none

                    - task: DownloadPipelineArtifact@2
                      name: DownloadArtifact
                      inputs:
                        buildType: 'specific'
                        project: 'User Interface Center of Excellence'
                        pipeline: ui-coe-ci-tagged
                        preferTriggeringPipeline: true
                        artifactName: AffectedApps
                        buildVersionToDownload: 'latestFromBranch'
                        branchName: $(Build.SourceBranch)
                        tags: ${{ stage.appTag }}
                        patterns: AffectedApps/apps/${{ stage.appPath }}/**/*
                        targetPath: '$(Pipeline.Workspace)'

                    - task: AzureKeyVault@2
                      inputs:
                        azureSubscription: ${{ stage.serviceConnection }}
                        KeyVaultName: ${{ stage.keyVaultName }}
                        SecretsFilter: '*'
                        RunAsPreJob: false

                    - task: CopyFiles@2
                      displayName: 'Drop in Config File'
                      inputs:
                        SourceFolder: '$(Pipeline.Workspace)/apps/${{ stage.appPath }}/assets/config/${{ stage.environment }}'
                        Contents: '*'
                        TargetFolder: '$(Pipeline.Workspace)/apps/${{ stage.appPath }}/assets/config/'
                        OverWrite: true

                    - task: AzureCLI@2
                      inputs:
                        azureSubscription: ${{ stage.serviceConnection }}
                        scriptType: 'pscore'
                        scriptLocation: 'inlineScript'
                        inlineScript: |
                          az storage blob delete-batch --source "`$web" --account-name ${{ stage.applicationName }}${{ stage.environment }}
                          az storage blob upload-batch --destination "`$web" --account-name ${{ stage.applicationName }}${{ stage.environment }} --source "$(Pipeline.Workspace)/apps/${{ stage.appPath }}"
